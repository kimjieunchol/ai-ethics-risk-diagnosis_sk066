# tools/report_pdf_enhanced.py - ÏôÑÏ†Ñ ÌïúÍµ≠Ïñ¥Ìôî Í≥†Í∏â PDF ÏÉùÏÑ±Í∏∞
from reportlab.lib import colors
from reportlab.lib.pagesizes import A4
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib.units import cm
from reportlab.platypus import (
    SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle,
    PageBreak, KeepTogether, Image, HRFlowable
)
from reportlab.pdfbase import pdfmetrics
from reportlab.pdfbase.ttfonts import TTFont
from reportlab.lib.enums import TA_CENTER, TA_LEFT, TA_JUSTIFY, TA_RIGHT
from reportlab.graphics.shapes import Drawing, Rect
from reportlab.graphics.charts.barcharts import VerticalBarChart
from reportlab.graphics.charts.piecharts import Pie
from datetime import datetime
from typing import Dict, List
import os


class EnhancedPDFReportGenerator:
    """ÏïÑÎ¶ÑÎãµÍ≥† Ï†ÑÎ¨∏Ï†ÅÏù∏ ÌïúÍµ≠Ïñ¥ PDF Î¶¨Ìè¨Ìä∏ ÏÉùÏÑ±Í∏∞"""
    
    def __init__(self):
        self.korean_font = self._setup_korean_font()
        self.styles = self._create_styles()
        self.page_width, self.page_height = A4
        
        # ÏÉâÏÉÅ ÌÖåÎßà
        self.colors = {
            'primary': colors.HexColor('#1A3A52'),      # ÏßÑÌïú ÎÑ§Ïù¥ÎπÑ
            'secondary': colors.HexColor('#2E5C8A'),    # Ï§ëÍ∞Ñ Î∏îÎ£®
            'accent': colors.HexColor('#3498DB'),       # Î∞ùÏùÄ Î∏îÎ£®
            'success': colors.HexColor('#27AE60'),      # Ï¥àÎ°ù
            'warning': colors.HexColor('#F39C12'),      # Ï£ºÌô©
            'danger': colors.HexColor('#E74C3C'),       # Îπ®Í∞ï
            'gray_light': colors.HexColor('#ECF0F1'),   # Ïó∞Ìïú ÌöåÏÉâ
            'gray_medium': colors.HexColor('#95A5A6'),  # Ï§ëÍ∞Ñ ÌöåÏÉâ
            'gray_dark': colors.HexColor('#34495E'),    # ÏßÑÌïú ÌöåÏÉâ
        }
    
    def _setup_korean_font(self) -> str:
        """ÌïúÍµ≠Ïñ¥ Ìè∞Ìä∏ ÏÑ§Ï†ï"""
        font_paths = [
            # Windows
            ('C:\\Windows\\Fonts\\malgun.ttf', 'MalgunGothic'),
            ('C:\\Windows\\Fonts\\batang.ttc', 'Batang'),
            # Linux
            ('/usr/share/fonts/truetype/nanum/NanumGothic.ttf', 'NanumGothic'),
            ('/usr/share/fonts/truetype/nanum/NanumBarunGothic.ttf', 'NanumBarun'),
            # macOS
            ('/System/Library/Fonts/AppleGothic.ttf', 'AppleGothic'),
            ('/Library/Fonts/NanumGothic.ttf', 'NanumGothic'),
        ]
        
        for path, name in font_paths:
            if os.path.exists(path):
                try:
                    pdfmetrics.registerFont(TTFont(name, path))
                    print(f"  ‚úÖ ÌïúÍµ≠Ïñ¥ Ìè∞Ìä∏ Î°úÎìú ÏÑ±Í≥µ: {name} ({path})")
                    return name
                except Exception as e:
                    print(f"  ‚ö†Ô∏è  Ìè∞Ìä∏ {name} Î°úÎìú ÏãúÎèÑ Ïã§Ìå®: {e}")
        
        print("  ‚ö†Ô∏è  ÌïúÍµ≠Ïñ¥ Ìè∞Ìä∏Î•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§. Í∏∞Î≥∏ Ìè∞Ìä∏ ÏÇ¨Ïö© (ÌïúÍ∏Ä Íπ®Ïßà Ïàò ÏûàÏùå)")
        return 'Helvetica'
    
    def _create_styles(self) -> Dict:
        """Ï†ÑÎ¨∏Ï†ÅÏù∏ PDF Ïä§ÌÉÄÏùº Ï†ïÏùò"""
        base_styles = getSampleStyleSheet()
        
        return {
            # Ï†úÎ™© Ïä§ÌÉÄÏùº
            'cover_title': ParagraphStyle(
                'CoverTitle',
                fontName=self.korean_font,
                fontSize=32,
                textColor=colors.HexColor('#1A3A52'),
                spaceAfter=20,
                alignment=TA_CENTER,
                leading=40
            ),
            'cover_subtitle': ParagraphStyle(
                'CoverSubtitle',
                fontName=self.korean_font,
                fontSize=16,
                textColor=colors.HexColor('#2E5C8A'),
                spaceAfter=30,
                alignment=TA_CENTER,
                leading=24
            ),
            
            # Ìó§Îî© Ïä§ÌÉÄÏùº
            'heading1': ParagraphStyle(
                'Heading1',
                fontName=self.korean_font,
                fontSize=20,
                textColor=colors.HexColor('#1A3A52'),
                spaceAfter=15,
                spaceBefore=20,
                leading=28,
                borderWidth=2,
                borderColor=colors.HexColor('#3498DB'),
                borderPadding=10,
                backColor=colors.HexColor('#EBF5FB')
            ),
            'heading2': ParagraphStyle(
                'Heading2',
                fontName=self.korean_font,
                fontSize=16,
                textColor=colors.HexColor('#2E5C8A'),
                spaceAfter=12,
                spaceBefore=15,
                leading=22,
                leftIndent=10,
                borderWidth=0,
                borderPadding=5
            ),
            'heading3': ParagraphStyle(
                'Heading3',
                fontName=self.korean_font,
                fontSize=13,
                textColor=colors.HexColor('#34495E'),
                spaceAfter=10,
                spaceBefore=12,
                leading=18,
                leftIndent=20
            ),
            
            # Î≥∏Î¨∏ Ïä§ÌÉÄÏùº
            'body': ParagraphStyle(
                'Body',
                fontName=self.korean_font,
                fontSize=10,
                leading=18,
                spaceAfter=12,
                alignment=TA_JUSTIFY,
                textColor=colors.HexColor('#2C3E50')
            ),
            'body_indent': ParagraphStyle(
                'BodyIndent',
                fontName=self.korean_font,
                fontSize=10,
                leading=18,
                spaceAfter=10,
                leftIndent=30,
                alignment=TA_JUSTIFY,
                textColor=colors.HexColor('#2C3E50')
            ),
            
            # Î¶¨Ïä§Ìä∏ Ïä§ÌÉÄÏùº
            'bullet': ParagraphStyle(
                'Bullet',
                fontName=self.korean_font,
                fontSize=10,
                leftIndent=30,
                spaceAfter=8,
                leading=16,
                textColor=colors.HexColor('#2C3E50')
            ),
            'bullet_sub': ParagraphStyle(
                'BulletSub',
                fontName=self.korean_font,
                fontSize=9,
                leftIndent=50,
                spaceAfter=6,
                leading=14,
                textColor=colors.HexColor('#34495E')
            ),
            
            # ÌäπÏàò Ïä§ÌÉÄÏùº
            'info_box': ParagraphStyle(
                'InfoBox',
                fontName=self.korean_font,
                fontSize=10,
                leading=16,
                backColor=colors.HexColor('#E8F6F3'),
                borderWidth=1,
                borderColor=colors.HexColor('#27AE60'),
                borderPadding=15,
                spaceAfter=15,
                textColor=colors.HexColor('#145A32')
            ),
            'warning_box': ParagraphStyle(
                'WarningBox',
                fontName=self.korean_font,
                fontSize=10,
                leading=16,
                backColor=colors.HexColor('#FEF9E7'),
                borderWidth=1,
                borderColor=colors.HexColor('#F39C12'),
                borderPadding=15,
                spaceAfter=15,
                textColor=colors.HexColor('#784212')
            ),
            'danger_box': ParagraphStyle(
                'DangerBox',
                fontName=self.korean_font,
                fontSize=10,
                leading=16,
                backColor=colors.HexColor('#FADBD8'),
                borderWidth=1,
                borderColor=colors.HexColor('#E74C3C'),
                borderPadding=15,
                spaceAfter=15,
                textColor=colors.HexColor('#641E16')
            ),
            
            # ÌÖåÏù¥Î∏î ÎÇ¥Ïö© Ïä§ÌÉÄÏùº
            'table_header': ParagraphStyle(
                'TableHeader',
                fontName=self.korean_font,
                fontSize=11,
                textColor=colors.white,
                alignment=TA_CENTER
            ),
            'table_cell': ParagraphStyle(
                'TableCell',
                fontName=self.korean_font,
                fontSize=9,
                leading=14,
                alignment=TA_CENTER
            ),
            'table_cell_left': ParagraphStyle(
                'TableCellLeft',
                fontName=self.korean_font,
                fontSize=9,
                leading=14,
                alignment=TA_LEFT
            ),
            
            # Í∏∞ÌÉÄ
            'footer': ParagraphStyle(
                'Footer',
                fontName=self.korean_font,
                fontSize=8,
                textColor=colors.HexColor('#7F8C8D'),
                alignment=TA_CENTER
            ),
            'caption': ParagraphStyle(
                'Caption',
                fontName=self.korean_font,
                fontSize=8,
                textColor=colors.HexColor('#7F8C8D'),
                alignment=TA_CENTER,
                spaceAfter=10
            ),
        }
    
    def generate_report(
        self,
        output_path: str,
        services: List[str],
        detailed_data: Dict,
        report_text: str = None
    ):
        """ÏïÑÎ¶ÑÎã§Ïö¥ PDF Î¶¨Ìè¨Ìä∏ ÏÉùÏÑ±"""
        
        doc = SimpleDocTemplate(
            output_path,
            pagesize=A4,
            rightMargin=2*cm,
            leftMargin=2*cm,
            topMargin=2.5*cm,
            bottomMargin=2*cm
        )
        
        story = []
        
        print("  üìÑ PDF ÏÉùÏÑ± Ï§ë...")
        print("     - ÌëúÏßÄ ÌéòÏù¥ÏßÄ ÏÉùÏÑ± Ï§ë...")
        story.extend(self._create_professional_cover(services))
        story.append(PageBreak())
        
        print("     - Î™©Ï∞® ÏÉùÏÑ± Ï§ë...")
        story.extend(self._create_table_of_contents())
        story.append(PageBreak())
        
        print("     - Executive Summary ÏÉùÏÑ± Ï§ë...")
        story.extend(self._create_executive_summary(services, detailed_data))
        story.append(PageBreak())
        
        print("     - ÌèâÍ∞Ä Î∞©Î≤ïÎ°† ÏÉùÏÑ± Ï§ë...")
        story.extend(self._create_methodology())
        story.append(PageBreak())
        
        print(f"     - ÏÑúÎπÑÏä§Î≥Ñ Î∂ÑÏÑù ÏÉùÏÑ± Ï§ë ({len(services)}Í∞ú)...")
        for idx, service in enumerate(services, 1):
            print(f"       {idx}/{len(services)}: {service}")
            story.extend(self._create_detailed_service_analysis(service, detailed_data))
            story.append(PageBreak())
        
        if len(services) >= 2:
            print("     - ÎπÑÍµê Î∂ÑÏÑù ÏÉùÏÑ± Ï§ë...")
            story.extend(self._create_comparison_analysis(services, detailed_data))
            story.append(PageBreak())
        
        print("     - Ï¢ÖÌï© Í∂åÍ≥†ÏÇ¨Ìï≠ ÏÉùÏÑ± Ï§ë...")
        story.extend(self._create_comprehensive_recommendations(services, detailed_data))
        story.append(PageBreak())
        
        print("     - Ï∞∏Í≥†Î¨∏Ìóå ÏÉùÏÑ± Ï§ë...")
        story.extend(self._create_references())
        story.append(PageBreak())
        
        print("     - Î∂ÄÎ°ù ÏÉùÏÑ± Ï§ë...")
        story.extend(self._create_appendix())
        
        # PDF ÎπåÎìú
        print("     - PDF ÌååÏùº ÎπåÎìú Ï§ë...")
        doc.build(story, onFirstPage=self._header_footer, onLaterPages=self._header_footer)
        
        print(f"  ‚úÖ PDF ÏÉùÏÑ± ÏôÑÎ£å: {output_path}")
        return output_path
    
    def _header_footer(self, canvas, doc):
        """Ï†ÑÎ¨∏Ï†ÅÏù∏ Ìó§Îçî/Ìë∏ÌÑ∞"""
        canvas.saveState()
        
        # Ìó§Îçî ÎùºÏù∏
        canvas.setStrokeColor(self.colors['accent'])
        canvas.setLineWidth(2)
        canvas.line(2*cm, A4[1] - 1.5*cm, A4[0] - 2*cm, A4[1] - 1.5*cm)
        
        # Ìë∏ÌÑ∞
        try:
            canvas.setFont(self.korean_font, 8)
        except Exception:
            canvas.setFont("Helvetica", 8)
        canvas.setFillColor(self.colors['gray_medium'])
        
        # ÏôºÏ™Ω: Î¨∏ÏÑú Ï†ïÎ≥¥
        canvas.drawString(
            2*cm, 1.5*cm,
            f"AI Ïú§Î¶¨ÏÑ± Î¶¨Ïä§ÌÅ¨ ÏßÑÎã® Î≥¥Í≥†ÏÑú | {datetime.now().strftime('%YÎÖÑ %mÏõî %dÏùº')}"
        )
        
        # Ïò§Î•∏Ï™Ω: ÌéòÏù¥ÏßÄ Î≤àÌò∏
        canvas.drawRightString(
            A4[0] - 2*cm, 1.5*cm,
            f"ÌéòÏù¥ÏßÄ {doc.page}"
        )
        
        # Ìë∏ÌÑ∞ ÎùºÏù∏
        canvas.setStrokeColor(self.colors['gray_light'])
        canvas.setLineWidth(1)
        canvas.line(2*cm, 1.2*cm, A4[0] - 2*cm, 1.2*cm)
        
        canvas.restoreState()
    
    def _create_professional_cover(self, services: List[str]) -> List:
        """Ï†ÑÎ¨∏Ï†ÅÏù∏ ÌëúÏßÄ ÌéòÏù¥ÏßÄ"""
        elements = []
        
        # ÏÉÅÎã® Ïó¨Î∞±
        elements.append(Spacer(1, 2*cm))
        
        # Î©îÏù∏ ÌÉÄÏù¥ÌãÄ
        elements.append(Paragraph(
            "AI Ïú§Î¶¨ÏÑ± Î¶¨Ïä§ÌÅ¨<br/>ÏßÑÎã® Î≥¥Í≥†ÏÑú",
            self.styles['cover_title']
        ))
        
        # Íµ¨Î∂ÑÏÑ†
        elements.append(Spacer(1, 0.5*cm))
        hr = HRFlowable(
            width="80%",
            thickness=3,
            color=self.colors['accent'],
            spaceAfter=0.5*cm,
            spaceBefore=0,
            hAlign='CENTER'
        )
        elements.append(hr)
        
        # Î∂ÄÏ†úÎ™©
        elements.append(Paragraph(
            "Íµ≠Ï†ú ÌëúÏ§Ä Í∏∞Î∞ò Ï¢ÖÌï© ÌèâÍ∞Ä Î∞è Í∞úÏÑ† Í∂åÍ≥†",
            self.styles['cover_subtitle']
        ))
        
        elements.append(Spacer(1, 2*cm))
        
        # Ï†ïÎ≥¥ Î∞ïÏä§
        info_data = [
            ['', ''],  # Îπà Ìó§Îçî
            ['üìä Î∂ÑÏÑù ÎåÄÏÉÅ ÏÑúÎπÑÏä§', '<br/>'.join(services)],
            ['üìö ÌèâÍ∞Ä Í∏∞Ï§Ä', 'EU AI Act (Ïú†ÎüΩÏó∞Ìï© AI Í∑úÏ†ú)<br/>UNESCO AI Ethics (Ïú†ÎÑ§Ïä§ÏΩî AI Ïú§Î¶¨)<br/>OECD AI Principles (OECD AI ÏõêÏπô)'],
            ['‚öñÔ∏è ÌèâÍ∞Ä Ï∞®Ïõê', 'Í≥µÏ†ïÏÑ± Î∞è Ìé∏Ìñ•ÏÑ±<br/>ÌîÑÎùºÏù¥Î≤ÑÏãú Î≥¥Ìò∏<br/>Ìà¨Î™ÖÏÑ± Î∞è ÏÑ§Î™ÖÍ∞ÄÎä•ÏÑ±<br/>Ï±ÖÏûÑÏÑ± Î∞è Í±∞Î≤ÑÎÑåÏä§<br/>ÏïàÏ†ÑÏÑ± Î∞è Î≥¥Ïïà'],
            ['üìÖ ÏûëÏÑ±Ïùº', datetime.now().strftime('%YÎÖÑ %mÏõî %dÏùº')],
            ['üïê ÌèâÍ∞Ä ÏãúÍ∞Ñ', datetime.now().strftime('%Y-%m-%d %H:%M:%S')],
        ]
        
        info_table = Table(info_data, colWidths=[4.5*cm, 9*cm])
        info_table.setStyle(TableStyle([
            # Ìó§Îçî Ïà®ÍπÄ
            ('BACKGROUND', (0, 0), (-1, 0), colors.white),
            ('LINEBELOW', (0, 0), (-1, 0), 0, colors.white),
            
            # Î≥∏Î¨∏
            ('BACKGROUND', (0, 1), (0, -1), self.colors['primary']),
            ('TEXTCOLOR', (0, 1), (0, -1), colors.white),
            ('BACKGROUND', (1, 1), (1, -1), colors.white),
            ('ALIGN', (0, 1), (0, -1), 'LEFT'),
            ('ALIGN', (1, 1), (1, -1), 'LEFT'),
            ('VALIGN', (0, 1), (-1, -1), 'TOP'),
            ('FONTNAME', (0, 1), (-1, -1), self.korean_font),
            ('FONTSIZE', (0, 1), (-1, -1), 10),
            ('LEFTPADDING', (0, 1), (-1, -1), 15),
            ('RIGHTPADDING', (0, 1), (-1, -1), 15),
            ('TOPPADDING', (0, 1), (-1, -1), 12),
            ('BOTTOMPADDING', (0, 1), (-1, -1), 12),
            ('GRID', (0, 1), (-1, -1), 1.5, self.colors['gray_light']),
            ('BOX', (0, 1), (-1, -1), 2, self.colors['primary']),
        ]))
        
        elements.append(info_table)
        elements.append(Spacer(1, 2*cm))
        
        # ÌèâÍ∞Ä Î™©Ìëú Î∞ïÏä§
        elements.append(Paragraph("üìå ÌèâÍ∞Ä Î™©Ìëú", self.styles['heading2']))
        
        objective_text = """
Î≥∏ Î≥¥Í≥†ÏÑúÎäî ÏÑ†Ï†ïÎêú AI ÏÑúÎπÑÏä§Ïóê ÎåÄÌïòÏó¨ <b>Íµ≠Ï†ú ÌëúÏ§Ä Í∞ÄÏù¥ÎìúÎùºÏù∏</b>ÏùÑ Í∏∞Ï§ÄÏúºÎ°ú 
<b>Ïú§Î¶¨Ï†Å Î¶¨Ïä§ÌÅ¨</b>Î•º Ï¢ÖÌï©Ï†ÅÏúºÎ°ú ÌèâÍ∞ÄÌïòÍ≥†, Í∞Å ÏÑúÎπÑÏä§Ïùò <b>Í∞ïÏ†ê</b>ÏùÑ ÌååÏïÖÌïòÎ©∞ 
ÌïÑÏöîÌïú <b>Í∞úÏÑ†ÏÇ¨Ìï≠</b>ÏùÑ Íµ¨Ï≤¥Ï†ÅÏúºÎ°ú Ï†úÏãúÌïòÎäî Í≤ÉÏùÑ Î™©ÌëúÎ°ú Ìï©ÎãàÎã§.
<br/><br/>
ÌèâÍ∞Ä Í≤∞Í≥ºÎäî AI ÏÑúÎπÑÏä§ Í∞úÎ∞úÏÇ¨Ïùò Ïú§Î¶¨ÏÑ± Í∞ïÌôî, Í∑úÏ†ú ÎãπÍµ≠Ïùò ÏÇ¨Ï†Ñ Ïã¨ÏÇ¨, 
Ìà¨ÏûêÏÇ¨Ïùò Î¶¨Ïä§ÌÅ¨ ÌèâÍ∞Ä Îì± Îã§ÏñëÌïú Î™©Ï†ÅÏúºÎ°ú ÌôúÏö©Îê† Ïàò ÏûàÏäµÎãàÎã§.
        """
        
        elements.append(Paragraph(objective_text, self.styles['info_box']))
        
        return elements
    
    def _create_table_of_contents(self) -> List:
        """Î™©Ï∞®"""
        elements = []
        
        elements.append(Paragraph("üìë Î™©Ï∞®", self.styles['heading1']))
        elements.append(Spacer(1, 0.5*cm))
        
        toc_data = [
            ['Ïû•', 'Ï†úÎ™©', 'ÌéòÏù¥ÏßÄ'],
            ['1', 'Executive Summary (Ï¢ÖÌï© ÏöîÏïΩ)', '3'],
            ['2', 'ÌèâÍ∞Ä Î∞©Î≤ïÎ°†', '4'],
            ['3', 'ÏÑúÎπÑÏä§Î≥Ñ ÏÉÅÏÑ∏ Î∂ÑÏÑù', '5'],
            ['4', 'ÎπÑÍµê Î∂ÑÏÑù (2Í∞ú Ïù¥ÏÉÅ ÏÑúÎπÑÏä§)', '10'],
            ['5', 'Ï¢ÖÌï© Í∂åÍ≥†ÏÇ¨Ìï≠', '12'],
            ['6', 'Ï∞∏Í≥†Î¨∏Ìóå', '14'],
            ['7', 'Î∂ÄÎ°ù', '15'],
        ]
        
        toc_table = Table(toc_data, colWidths=[1.5*cm, 10*cm, 2*cm])
        toc_table.setStyle(TableStyle([
            ('BACKGROUND', (0, 0), (-1, 0), self.colors['secondary']),
            ('TEXTCOLOR', (0, 0), (-1, 0), colors.white),
            ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
            ('ALIGN', (1, 0), (1, -1), 'LEFT'),
            ('FONTNAME', (0, 0), (-1, -1), self.korean_font),
            ('FONTSIZE', (0, 0), (-1, 0), 11),
            ('FONTSIZE', (0, 1), (-1, -1), 10),
            ('ROWBACKGROUNDS', (0, 1), (-1, -1), [colors.white, self.colors['gray_light']]),
            ('GRID', (0, 0), (-1, -1), 1, self.colors['gray_medium']),
            ('VALIGN', (0, 0), (-1, -1), 'MIDDLE'),
            ('TOPPADDING', (0, 0), (-1, -1), 10),
            ('BOTTOMPADDING', (0, 0), (-1, -1), 10),
        ]))
        
        elements.append(toc_table)
        
        return elements
    
    def _create_executive_summary(self, services: List[str], data: Dict) -> List:
        """Executive Summary (ÌïúÍµ≠Ïñ¥)"""
        elements = []
        
        elements.append(Paragraph("1. EXECUTIVE SUMMARY (Ï¢ÖÌï© ÏöîÏïΩ)", self.styles['heading1']))
        elements.append(Spacer(1, 0.3*cm))
        
        # 1.1 ÌèâÍ∞Ä Í∞úÏöî
        elements.append(Paragraph("1.1 ÌèâÍ∞Ä Í∞úÏöî", self.styles['heading2']))
        
        overview_text = f"""
Î≥∏ ÌèâÍ∞ÄÎäî <b>{len(services)}Í∞ú AI ÏÑúÎπÑÏä§</b>Ïóê ÎåÄÌïòÏó¨ EU AI Act, UNESCO AI Ethics, 
OECD AI Principles Îì± <b>Íµ≠Ï†ú ÌëúÏ§Ä</b>ÏùÑ Í∏∞Ï§ÄÏúºÎ°ú 5Í∞ú Ï∞®Ïõê(Í≥µÏ†ïÏÑ±, ÌîÑÎùºÏù¥Î≤ÑÏãú, Ìà¨Î™ÖÏÑ±, 
Ï±ÖÏûÑÏÑ±, ÏïàÏ†ÑÏÑ±)ÏóêÏÑú Ïú§Î¶¨Ï†Å Î¶¨Ïä§ÌÅ¨Î•º ÌèâÍ∞ÄÌñàÏäµÎãàÎã§.
<br/><br/>
ÌèâÍ∞ÄÎäî <b>LLM Í∏∞Î∞ò Ï†ïÏÑ± ÌèâÍ∞Ä</b>ÏôÄ <b>ÏûêÎèôÌôîÎêú Ï≤¥ÌÅ¨Î¶¨Ïä§Ìä∏</b>Î•º Í≤∞Ìï©Ìïú Ïù¥Ï§ë Í≤ÄÏ¶ù 
ÏãúÏä§ÌÖúÏùÑ ÌÜµÌï¥ ÏßÑÌñâÎêòÏóàÏúºÎ©∞, Ïõπ Í≤ÄÏÉâÏùÑ ÌÜµÌïú Ïã§Ï¶ùÏ†Å Ï¶ùÍ±∞ ÏàòÏßëÏúºÎ°ú Í∞ùÍ¥ÄÏÑ±ÏùÑ ÌôïÎ≥¥ÌñàÏäµÎãàÎã§.
        """
        
        elements.append(Paragraph(overview_text, self.styles['body']))
        elements.append(Spacer(1, 0.4*cm))
        
        # 1.2 Ï¢ÖÌï© ÌèâÍ∞Ä Í≤∞Í≥º
        elements.append(Paragraph("1.2 Ï¢ÖÌï© ÌèâÍ∞Ä Í≤∞Í≥º", self.styles['heading2']))
        
        score_data = [['ÏÑúÎπÑÏä§', 'Ï¢ÖÌï© Ï†êÏàò', 'Î¶¨Ïä§ÌÅ¨ ÏàòÏ§Ä', 'ÌèâÍ∞Ä Îì±Í∏â', 'Ï¢ÖÌï© ÌèâÍ∞Ä']]
        
        for service in services:
            assessment = data['risk_assessments'].get(service, {})
            score = assessment.get('overall_score', 0)
            risk = assessment.get('overall_risk_level', 'ÏïåÏàòÏóÜÏùå')
            grade = self._get_grade(score)
            
            # Ï¢ÖÌï© ÌèâÍ∞Ä Î¨∏Íµ¨
            if score >= 4.5:
                status = "Îß§Ïö∞ Ïö∞Ïàò"
            elif score >= 4.0:
                status = "Ïö∞Ïàò"
            elif score >= 3.5:
                status = "ÏñëÌò∏"
            elif score >= 3.0:
                status = "Î≥¥ÌÜµ"
            elif score >= 2.0:
                status = "ÎØ∏Ìù°"
            else:
                status = "Î∂ÄÏ°±"
            
            score_data.append([
                service,
                f"{score}/5",
                risk,
                grade,
                status
            ])
        
        score_table = Table(score_data, colWidths=[2.8*cm, 2*cm, 2.2*cm, 1.8*cm, 2*cm])
        score_table.setStyle(TableStyle([
            ('BACKGROUND', (0, 0), (-1, 0), self.colors['primary']),
            ('TEXTCOLOR', (0, 0), (-1, 0), colors.white),
            ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
            ('FONTNAME', (0, 0), (-1, -1), self.korean_font),
            ('FONTSIZE', (0, 0), (-1, 0), 10),
            ('FONTSIZE', (0, 1), (-1, -1), 9),
            ('ROWBACKGROUNDS', (0, 1), (-1, -1), [colors.white, self.colors['gray_light']]),
            ('GRID', (0, 0), (-1, -1), 1, self.colors['gray_medium']),
            ('VALIGN', (0, 0), (-1, -1), 'MIDDLE'),
            ('TOPPADDING', (0, 0), (-1, -1), 10),
            ('BOTTOMPADDING', (0, 0), (-1, -1), 10),
        ]))
        
        elements.append(score_table)
        elements.append(Spacer(1, 0.4*cm))
        
        # 1.3 Ï£ºÏöî Î∞úÍ≤¨ÏÇ¨Ìï≠
        elements.append(Paragraph("1.3 Ï£ºÏöî Î∞úÍ≤¨ÏÇ¨Ìï≠", self.styles['heading2']))
        
        avg_score = 0.0
        try:
            avg_score = sum([v.get('overall_score', 0) for v in data.get('risk_assessments', {}).values()]) / max(len(services), 1)
        except Exception:
            avg_score = 0.0
        
        # ÏµúÍ≥†/ÏµúÏ†Ä Ï†êÏàò ÏÑúÎπÑÏä§
        scores = [(s, data.get('risk_assessments', {}).get(s, {}).get('overall_score', 0)) for s in services]
        if scores:
            best_service = max(scores, key=lambda x: x[1])
            worst_service = min(scores, key=lambda x: x[1])
        else:
            best_service = ("-","0")
            worst_service = ("-","0")
        
        findings_text = f"""
<b>1) Ï†ÑÏ≤¥ ÌèâÍ∑† Ïú§Î¶¨ Ï†êÏàò:</b> {avg_score:.1f}/5<br/>
   ‚Üí Ï†ÑÎ∞òÏ†ÅÏúºÎ°ú {'Ïö∞ÏàòÌïú' if avg_score >= 4 else 'ÏñëÌò∏Ìïú' if avg_score >= 3.5 else 'Í∞úÏÑ†Ïù¥ ÌïÑÏöîÌïú'} ÏàòÏ§ÄÏûÖÎãàÎã§.
<br/><br/>
<b>2) ÏµúÍ≥† ÌèâÍ∞Ä ÏÑúÎπÑÏä§:</b> {best_service[0]} ({best_service[1]}/5)<br/>
   ‚Üí Ïú§Î¶¨ÏÑ± Ï∏°Î©¥ÏóêÏÑú Í∞ÄÏû• ÏïûÏÑúÍ∞ÄÎäî ÏÑúÎπÑÏä§Î°ú ÌèâÍ∞ÄÎê©ÎãàÎã§.
<br/><br/>
<b>3) Í∞úÏÑ† ÌïÑÏöî ÏÑúÎπÑÏä§:</b> {worst_service[0]} ({worst_service[1]}/5)<br/>
   ‚Üí Ïó¨Îü¨ Ï∞®ÏõêÏóêÏÑú Í∞úÏÑ†Ïù¥ ÌïÑÏöîÌïú Í≤ÉÏúºÎ°ú ÎÇòÌÉÄÎÇ¨ÏäµÎãàÎã§.
<br/><br/>
<b>4) Í≥µÌÜµ Í∞ïÏ†ê:</b><br/>
   ‚Ä¢ ÎåÄÎ∂ÄÎ∂ÑÏùò ÏÑúÎπÑÏä§Í∞Ä Í∏∞Î≥∏Ï†ÅÏù∏ Í∞úÏù∏Ï†ïÎ≥¥ Î≥¥Ìò∏ Ï†ïÏ±ÖÏùÑ ÏàòÎ¶ΩÌïòÍ≥† ÏûàÏäµÎãàÎã§.<br/>
   ‚Ä¢ Ìà¨Î™ÖÏÑ± Í∞ïÌôîÎ•º ÏúÑÌïú ÎÖ∏Î†•Ïù¥ Ï¶ùÍ∞ÄÌïòÍ≥† ÏûàÏäµÎãàÎã§.
<br/><br/>
<b>5) Í≥µÌÜµ ÏïΩÏ†ê:</b><br/>
   ‚Ä¢ Ìé∏Ìñ•ÏÑ± ÌÖåÏä§Ìä∏ Î∞è ÏôÑÌôî Ï°∞ÏπòÍ∞Ä Î∂ÄÏ°±Ìïú Í≤ΩÏö∞Í∞Ä ÎßéÏäµÎãàÎã§.<br/>
   ‚Ä¢ Î™ÖÌôïÌïú Ï±ÖÏûÑ Ï≤¥Í≥ÑÏôÄ Í±∞Î≤ÑÎÑåÏä§Í∞Ä ÎØ∏Ìù°Ìïú ÏÑúÎπÑÏä§Í∞Ä ÏûàÏäµÎãàÎã§.
        """
        
        elements.append(Paragraph(findings_text, self.styles['body']))
        elements.append(Spacer(1, 0.4*cm))
        
        # 1.4 ÏµúÏö∞ÏÑ† Í∂åÍ≥†ÏÇ¨Ìï≠
        elements.append(Paragraph("1.4 ÏµúÏö∞ÏÑ† Í∂åÍ≥†ÏÇ¨Ìï≠", self.styles['heading2']))
        
        recommendations_text = """
<b>1) Ï¶âÏãú Ï°∞Ïπò ÌïÑÏöî (1Í∞úÏõî Ïù¥ÎÇ¥):</b><br/>
   ‚Ä¢ AI Ïú§Î¶¨ Ï†ïÏ±Ö Î¨∏ÏÑú ÏûëÏÑ± Î∞è Í≥µÍ∞ú<br/>
   ‚Ä¢ Ìé∏Ìñ•ÏÑ± ÌÖåÏä§Ìä∏ Í≥ÑÌöç ÏàòÎ¶Ω<br/>
   ‚Ä¢ Í∞úÏù∏Ï†ïÎ≥¥ Ï≤òÎ¶¨Î∞©Ïπ® Í∞ïÌôî
<br/><br/>
<b>2) Îã®Í∏∞ Í∞úÏÑ† (1-3Í∞úÏõî):</b><br/>
   ‚Ä¢ Ìé∏Ìñ•ÏÑ± Í∞êÏßÄ Î∞è ÏôÑÌôî Î©îÏª§ÎãàÏ¶ò ÎèÑÏûÖ<br/>
   ‚Ä¢ Ìà¨Î™ÖÏÑ± Î≥¥Í≥†ÏÑú Î∞úÌñâ Ï§ÄÎπÑ<br/>
   ‚Ä¢ ÏÇ¨Ïö©Ïûê ÌîºÎìúÎ∞± ÏàòÏßë Ï≤¥Í≥Ñ Íµ¨Ï∂ï
<br/><br/>
<b>3) Ï§ëÏû•Í∏∞ Í∞úÏÑ† (3-6Í∞úÏõî Ïù¥ÏÉÅ):</b><br/>
   ‚Ä¢ AI Í±∞Î≤ÑÎÑåÏä§ Ï≤¥Í≥Ñ ÏàòÎ¶Ω Î∞è Ïú§Î¶¨ ÏúÑÏõêÌöå Íµ¨ÏÑ±<br/>
   ‚Ä¢ Ï†ïÍ∏∞Ï†ÅÏù∏ Ïú§Î¶¨ Í∞êÏÇ¨ ÌîÑÎ°úÏÑ∏Ïä§ ÌôïÎ¶Ω<br/>
   ‚Ä¢ Íµ≠Ï†ú ÌëúÏ§Ä Î∞è Ïù∏Ï¶ù ÌöçÎìù Ï∂îÏßÑ
        """
        
        elements.append(Paragraph(recommendations_text, self.styles['warning_box']))
        
        return elements
    
    def _create_methodology(self) -> List:
        """ÌèâÍ∞Ä Î∞©Î≤ïÎ°† (ÌïúÍµ≠Ïñ¥)"""
        elements = []
        
        elements.append(Paragraph("2. ÌèâÍ∞Ä Î∞©Î≤ïÎ°†", self.styles['heading1']))
        elements.append(Spacer(1, 0.3*cm))
        
        # 2.1 ÌèâÍ∞Ä ÌîÑÎ†àÏûÑÏõåÌÅ¨
        elements.append(Paragraph("2.1 ÌèâÍ∞Ä ÌîÑÎ†àÏûÑÏõåÌÅ¨", self.styles['heading2']))
        
        framework_text = """
Î≥∏ ÌèâÍ∞ÄÎäî Îã§ÏùåÏùò <b>3ÎåÄ Íµ≠Ï†ú ÌëúÏ§Ä</b>ÏùÑ Í∏∞Ï§ÄÏúºÎ°ú Ïã§ÏãúÎêòÏóàÏäµÎãàÎã§:
        """
        
        elements.append(Paragraph(framework_text, self.styles['body']))
        
        # Íµ≠Ï†ú ÌëúÏ§Ä ÌÖåÏù¥Î∏î
        standards_data = [
            ['ÌëúÏ§Ä', 'Ï£ºÏöî ÎÇ¥Ïö© ÏöîÏïΩ'],
            ['EU AI Act', 'ÏúÑÌóò Í∏∞Î∞ò Í∑úÏ†ú ÌîÑÎ†àÏûÑÏõåÌÅ¨, Í≥†ÏúÑÌóò AI ÏãúÏä§ÌÖúÏóê ÎåÄÌïú ÏùòÎ¨¥ Í∑úÏ†ï'],
            ['UNESCO AI Ethics', 'Ïù∏Í∞Ñ Ï§ëÏã¨Ïùò AI Ïú§Î¶¨ ÏõêÏπô(Ï°¥ÏóÑÏÑ±, Í≥µÏ†ïÏÑ± Îì±)'],
            ['OECD AI Principles', 'Ìà¨Î™ÖÏÑ±, Ï±ÖÏûÑÏÑ±, ÏïàÏ†ÑÏÑ± Í∞ïÏ°∞']
        ]
        
        standards_table = Table(standards_data, colWidths=[4*cm, 10*cm])
        standards_table.setStyle(TableStyle([
            ('BACKGROUND', (0, 0), (-1, 0), self.colors['secondary']),
            ('TEXTCOLOR', (0, 0), (-1, 0), colors.white),
            ('FONTNAME', (0, 0), (-1, -1), self.korean_font),
            ('FONTSIZE', (0, 0), (-1, -1), 9),
            ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
            ('ROWBACKGROUNDS', (0, 1), (-1, -1), [colors.white, self.colors['gray_light']]),
            ('GRID', (0, 0), (-1, -1), 1, self.colors['gray_medium']),
            ('VALIGN', (0, 0), (-1, -1), 'TOP'),
            ('LEFTPADDING', (0, 0), (-1, -1), 8),
            ('RIGHTPADDING', (0, 0), (-1, -1), 8),
        ]))
        
        elements.append(standards_table)
        elements.append(Spacer(1, 0.4*cm))
        
        # 2.2 ÌèâÍ∞Ä Ï†àÏ∞®
        elements.append(Paragraph("2.2 ÌèâÍ∞Ä Ï†àÏ∞®", self.styles['heading2']))
        procedure_text = """
ÌèâÍ∞ÄÎäî Îã§Ïùå Ï†àÏ∞®Î°ú ÏàòÌñâÎêòÏóàÏäµÎãàÎã§:
‚Ä¢ Îç∞Ïù¥ÌÑ∞ ÏàòÏßë: Í≥µÍ∞ú Î¨∏ÏÑú, ÏÑúÎπÑÏä§ Ïù¥Ïö©ÏïΩÍ¥Ä, Í∞úÏù∏Ï†ïÎ≥¥Ï≤òÎ¶¨Î∞©Ïπ®, Í∏∞Ïà†Î∞±ÏÑú, Í≥µÍ∞ú API Î¨∏ÏÑú Îì±.
‚Ä¢ Ï†ïÏÑ±ÌèâÍ∞Ä: Ï†ÑÎ¨∏Í∞Ä Î∞è LLM Í∏∞Î∞ò Ï†ïÏÑ±Í≤ÄÌÜ†Î•º ÌÜµÌï¥ Ï†ïÏ±Ö¬∑Ï†àÏ∞®¬∑Í±∞Î≤ÑÎÑåÏä§ ÏöîÏÜå ÌèâÍ∞Ä.
‚Ä¢ ÏûêÎèôÏ≤¥ÌÅ¨Î¶¨Ïä§Ìä∏: Í∑úÍ≤©ÌôîÎêú Ï≤¥ÌÅ¨Î¶¨Ïä§Ìä∏Î•º ÌÜµÌï¥ ÎàÑÎùΩ ÏöîÏÜå Î∞è Í∏∞Ïà†Ï†Å¬∑Ï†àÏ∞®Ï†Å ÌÜµÏ†ú Ï†êÍ≤Ä.
‚Ä¢ Ï¢ÖÌï©Ï†êÏàò ÏÇ∞Ï∂ú: 5Ï†ê Ï≤ôÎèÑ(5:Îß§Ïö∞ Ïö∞Ïàò ~ 0:Î∂ÄÏ°±)Î•º ÏÇ¨Ïö©Ìï¥ Ï∞®ÏõêÎ≥Ñ Í∞ÄÏ§ëÌèâÍ∑† ÏÇ∞Ï∂ú.
        """
        elements.append(Paragraph(procedure_text, self.styles['body']))
        elements.append(Spacer(1, 0.3*cm))
        
        # 2.3 ÌïúÍ≥ÑÏ†ê
        elements.append(Paragraph("2.3 ÌïúÍ≥ÑÏ†ê", self.styles['heading2']))
        limitations_text = """
Î≥∏ ÌèâÍ∞ÄÎäî Í≥µÍ∞úÏûêÎ£å Í∏∞Î∞òÏù¥Î©∞, ÎÇ¥Î∂Ä ÏãúÏä§ÌÖú ÏΩîÎìúÎÇò ÎπÑÍ≥µÍ∞ú Íµ¨ÏÑ±Ïóê Ï†ëÍ∑ºÌï† Ïàò ÏóÜÏóàÏäµÎãàÎã§. 
Îî∞ÎùºÏÑú ÎÇ¥Î∂Ä ÌÜµÏ†úÏùò Ï†ïÌôïÏÑ±ÏùÄ ÎÇ¥Î∂Ä Í∞êÏÇ¨ ÎòêÎäî Ïã§Î¨¥ Í≤ÄÏ¶ùÏùÑ ÌÜµÌï¥ Î≥¥ÏôÑÎêòÏñ¥Ïïº Ìï©ÎãàÎã§.
        """
        elements.append(Paragraph(limitations_text, self.styles['body']))
        
        return elements
    
    def _create_detailed_service_analysis(self, service: str, data: Dict) -> List:
        """ÏÑúÎπÑÏä§Î≥Ñ ÏÉÅÏÑ∏ Î∂ÑÏÑù ÌéòÏù¥ÏßÄ ÏÉùÏÑ±"""
        elements = []
        elements.append(Paragraph(f"3. {service} - ÏÉÅÏÑ∏ Î∂ÑÏÑù", self.styles['heading1']))
        elements.append(Spacer(1, 0.2*cm))
        
        assessment = data.get('risk_assessments', {}).get(service, {})
        # Ï∞®ÏõêÎ≥Ñ Ï†êÏàò ÏàòÏßë (Í∏∞Î≥∏ÌÇ§ Ï°¥Ïû¨ Ïó¨Î∂Ä Î∞©Ïñ¥)
        dimensions = assessment.get('dimensions', {
            'fairness': {'score': assessment.get('fairness_score', 0), 'notes': assessment.get('fairness_notes', '')},
            'privacy': {'score': assessment.get('privacy_score', 0), 'notes': assessment.get('privacy_notes', '')},
            'transparency': {'score': assessment.get('transparency_score', 0), 'notes': assessment.get('transparency_notes', '')},
            'accountability': {'score': assessment.get('accountability_score', 0), 'notes': assessment.get('accountability_notes', '')},
            'safety': {'score': assessment.get('safety_score', 0), 'notes': assessment.get('safety_notes', '')},
        })
        
        # ÏöîÏïΩ Î∞ïÏä§
        summary = assessment.get('summary', 'Ìï¥Îãπ ÏÑúÎπÑÏä§Ïùò ÏöîÏïΩ Ï†ïÎ≥¥Í∞Ä Ï†úÍ≥µÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§.')
        elements.append(Paragraph("ÏöîÏïΩ", self.styles['heading2']))
        elements.append(Paragraph(summary, self.styles['body']))
        elements.append(Spacer(1, 0.2*cm))
        
        # Ï∞®ÏõêÎ≥Ñ Ï†êÏàò Ìëú
        dim_table_data = [['Ï∞®Ïõê', 'Ï†êÏàò (5Ï†ê ÎßåÏ†ê)', 'Ï£ºÏöî ÏΩîÎ©òÌä∏']]
        for dim_name, dim_info in dimensions.items():
            display_name = {
                'fairness': 'Í≥µÏ†ïÏÑ±',
                'privacy': 'ÌîÑÎùºÏù¥Î≤ÑÏãú',
                'transparency': 'Ìà¨Î™ÖÏÑ±',
                'accountability': 'Ï±ÖÏûÑÏÑ±',
                'safety': 'ÏïàÏ†ÑÏÑ±'
            }.get(dim_name, dim_name)
            score = dim_info.get('score', 0) if isinstance(dim_info, dict) else 0
            notes = dim_info.get('notes', '') if isinstance(dim_info, dict) else ''
            dim_table_data.append([display_name, f"{score}/5", notes or '-'])
        
        dim_table = Table(dim_table_data, colWidths=[4.5*cm, 3*cm, 6*cm])
        dim_table.setStyle(TableStyle([
            ('BACKGROUND', (0,0), (-1,0), self.colors['primary']),
            ('TEXTCOLOR', (0,0), (-1,0), colors.white),
            ('FONTNAME', (0,0), (-1,-1), self.korean_font),
            ('FONTSIZE', (0,0), (-1,-1), 9),
            ('ALIGN', (1,1), (1,-1), 'CENTER'),
            ('VALIGN', (0,0), (-1,-1), 'TOP'),
            ('ROWBACKGROUNDS', (0,1), (-1,-1), [colors.white, self.colors['gray_light']]),
            ('GRID', (0,0), (-1,-1), 1, self.colors['gray_medium']),
        ]))
        elements.append(dim_table)
        elements.append(Spacer(1, 0.3*cm))
        
        # Ï£ºÏöî Ï∑®ÏïΩÏ†ê Î∞è Í∂åÍ≥†
        elements.append(Paragraph("Ï£ºÏöî Ï∑®ÏïΩÏ†ê", self.styles['heading2']))
        weaknesses = assessment.get('weaknesses', ['Íµ¨Ï≤¥Ï†Å Ï∑®ÏïΩÏ†ê Ï†ïÎ≥¥ ÏóÜÏùå'])
        if isinstance(weaknesses, list):
            for w in weaknesses:
                elements.append(Paragraph(f"‚Ä¢ {w}", self.styles['bullet']))
        else:
            elements.append(Paragraph(str(weaknesses), self.styles['body']))
        elements.append(Spacer(1, 0.2*cm))
        
        elements.append(Paragraph("Í∂åÍ≥†ÏÇ¨Ìï≠ (Ïö∞ÏÑ†ÏàúÏúÑ Í∏∞Ï§Ä)", self.styles['heading2']))
        recs = assessment.get('recommendations', [
            'Í∂åÍ≥† ÏÇ¨Ìï≠Ïù¥ Ï†úÍ≥µÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§.'
        ])
        if isinstance(recs, list):
            for r in recs:
                elements.append(Paragraph(f"‚Ä¢ {r}", self.styles['bullet']))
        else:
            elements.append(Paragraph(str(recs), self.styles['body']))
        elements.append(Spacer(1, 0.5*cm))
        
        # Í∞ÑÎã®Ìïú ÎßâÎåÄ Ï∞®Ìä∏ ‚Äî Ï∞®ÏõêÎ≥Ñ Ï†êÏàò ÏãúÍ∞ÅÌôî (reportlab graphics)
        try:
            drawing = Drawing(400, 150)
            bc = VerticalBarChart()
            bc.x = 50
            bc.y = 15
            bc.height = 100
            bc.width = 300
            bc.data = [[
                dimensions.get('fairness', {}).get('score', 0),
                dimensions.get('privacy', {}).get('score', 0),
                dimensions.get('transparency', {}).get('score', 0),
                dimensions.get('accountability', {}).get('score', 0),
                dimensions.get('safety', {}).get('score', 0),
            ]]
            bc.categoryAxis.categoryNames = ['Í≥µÏ†ïÏÑ±','ÌîÑÎùºÏù¥Î≤ÑÏãú','Ìà¨Î™ÖÏÑ±','Ï±ÖÏûÑÏÑ±','ÏïàÏ†ÑÏÑ±']
            bc.valueAxis.valueMin = 0
            bc.valueAxis.valueMax = 5
            bc.valueAxis.valueStep = 1
            drawing.add(bc)
            elements.append(drawing)
            elements.append(Spacer(1, 0.3*cm))
        except Exception:
            # Ïã§Ìå® Ïãú Î¨¥Ïãú (ÏãúÍ∞ÅÌôîÎäî Î≥¥Ï°∞ ÏöîÏÜå)
            pass
        
        return elements
    
    def _create_comparison_analysis(self, services: List[str], data: Dict) -> List:
        """Ïó¨Îü¨ ÏÑúÎπÑÏä§ ÎπÑÍµê Î∂ÑÏÑù(Í∞ÑÎã®ÌïòÍ≤å Ìëú/ÌèâÍ∑†/Í∞ïÏ†ê¬∑ÏïΩÏ†ê ÎπÑÍµê)"""
        elements = []
        elements.append(Paragraph("4. ÎπÑÍµê Î∂ÑÏÑù", self.styles['heading1']))
        elements.append(Spacer(1, 0.2*cm))
        
        # ÎπÑÍµêÏö© Ìëú ÏÉùÏÑ±: ÏÑúÎπÑÏä§Î≥Ñ Ï£ºÏöî Ï†êÏàò(Ï¢ÖÌï©)
        header = ['ÏÑúÎπÑÏä§', 'Ï¢ÖÌï©Ï†êÏàò', 'Í≥µÏ†ïÏÑ±', 'ÌîÑÎùºÏù¥Î≤ÑÏãú', 'Ìà¨Î™ÖÏÑ±', 'Ï±ÖÏûÑÏÑ±', 'ÏïàÏ†ÑÏÑ±']
        table_data = [header]
        for s in services:
            ass = data.get('risk_assessments', {}).get(s, {})
            row = [
                s,
                ass.get('overall_score', 0),
                ass.get('fairness_score', ass.get('dimensions', {}).get('fairness', {}).get('score', 0)),
                ass.get('privacy_score', ass.get('dimensions', {}).get('privacy', {}).get('score', 0)),
                ass.get('transparency_score', ass.get('dimensions', {}).get('transparency', {}).get('score', 0)),
                ass.get('accountability_score', ass.get('dimensions', {}).get('accountability', {}).get('score', 0)),
                ass.get('safety_score', ass.get('dimensions', {}).get('safety', {}).get('score', 0)),
            ]
            # Ìè¨Îß∑ÌåÖ: Ïà´ÏûêÎäî ÏÜåÏàò 1ÏûêÎ¶¨Î°ú
            row = [row[0]] + [f"{float(x):.1f}" if isinstance(x, (int, float, str)) and str(x).replace('.','',1).isdigit() else str(x) for x in row[1:]]
            table_data.append(row)
        
        comp_table = Table(table_data, colWidths=[4*cm, 2*cm, 2*cm, 2*cm, 2*cm, 2*cm, 2*cm])
        comp_table.setStyle(TableStyle([
            ('BACKGROUND', (0,0), (-1,0), self.colors['primary']),
            ('TEXTCOLOR', (0,0), (-1,0), colors.white),
            ('FONTNAME', (0,0), (-1,-1), self.korean_font),
            ('FONTSIZE', (0,0), (-1,-1), 9),
            ('GRID', (0,0), (-1,-1), 1, self.colors['gray_medium']),
            ('ROWBACKGROUNDS', (0,1), (-1,-1), [colors.white, self.colors['gray_light']]),
            ('ALIGN', (1,1), (-1,-1), 'CENTER')
        ]))
        elements.append(comp_table)
        elements.append(Spacer(1, 0.4*cm))
        
        # ÏöîÏïΩ Î∂ÑÏÑù: ÌèâÍ∑† Î∞è Í≥µÌÜµ Ïù¥Ïäà
        elements.append(Paragraph("ÎπÑÍµê ÏöîÏïΩ", self.styles['heading2']))
        # ÌèâÍ∑† Í≥ÑÏÇ∞
        avg_scores = {}
        count = max(len(services), 1)
        dims = ['overall_score', 'fairness_score', 'privacy_score', 'transparency_score', 'accountability_score', 'safety_score']
        for d in dims:
            ssum = 0.0
            for s in services:
                ssum += float(data.get('risk_assessments', {}).get(s, {}).get(d, 0) or 0)
            avg_scores[d] = ssum / count
        summary_lines = [
            f"‚Ä¢ Ï†ÑÏ≤¥ ÌèâÍ∑† Ï¢ÖÌï©Ï†êÏàò: {avg_scores['overall_score']:.1f}/5",
            f"‚Ä¢ ÌèâÍ∑† Í≥µÏ†ïÏÑ± Ï†êÏàò: {avg_scores['fairness_score']:.1f}/5",
            f"‚Ä¢ ÌèâÍ∑† ÌîÑÎùºÏù¥Î≤ÑÏãú Ï†êÏàò: {avg_scores['privacy_score']:.1f}/5",
            "‚Ä¢ Í≥µÌÜµ Ïù¥Ïäà: Ìé∏Ìñ•ÏÑ± ÌÖåÏä§Ìä∏ ÎØ∏ÎπÑ, Ï±ÖÏûÑÏÑ±(Í±∞Î≤ÑÎÑåÏä§) Î∂ÄÏû¨, Ìà¨Î™ÖÏÑ± Î¨∏ÏÑúÌôî ÎØ∏Ìù°"
        ]
        for l in summary_lines:
            elements.append(Paragraph(l, self.styles['body']))
        
        return elements
    
    def _create_comprehensive_recommendations(self, services: List[str], data: Dict) -> List:
        """Ï¢ÖÌï© Í∂åÍ≥†ÏÇ¨Ìï≠ (ÏÑúÎπÑÏä§ Í∑∏Î£π Î∞è Í∞úÎ≥Ñ Í∂åÍ≥† Ìè¨Ìï®)"""
        elements = []
        elements.append(Paragraph("5. Ï¢ÖÌï© Í∂åÍ≥†ÏÇ¨Ìï≠", self.styles['heading1']))
        elements.append(Spacer(1, 0.2*cm))
        
        # Í≥µÌÜµ Í∂åÍ≥† ‚Äî Í∑∏Î£π Î†àÎ≤®
        elements.append(Paragraph("5.1 Í≥µÌÜµ Í∂åÍ≥† (Î™®Îì† ÏÑúÎπÑÏä§ ÎåÄÏÉÅ)", self.styles['heading2']))
        common_recs = [
            "AI Ïú§Î¶¨ Ï†ïÏ±Ö Î∞è Í±∞Î≤ÑÎÑåÏä§ Î¨∏ÏÑúÌôî Î∞è Í≥µÍ∞ú",
            "Ï†ïÍ∏∞Ï†ÅÏù∏ Ìé∏Ìñ•ÏÑ± ÌÖåÏä§Ìä∏ÏôÄ ÏôÑÌôî Ï†àÏ∞® ÎèÑÏûÖ",
            "ÎØºÍ∞ê Îç∞Ïù¥ÌÑ∞ Ï∑®Í∏âÏóê ÎåÄÌïú Í∞ïÌôîÎêú Í∞úÏù∏Ï†ïÎ≥¥ Î≥¥Ìò∏ ÌÜµÏ†ú Ï†ÅÏö©",
            "Ìà¨Î™ÖÏÑ± Î≥¥Í≥†ÏÑú(Î™®Îç∏ ÏÑ§Î™Ö, Îç∞Ïù¥ÌÑ∞ Ï∂úÏ≤ò, ÌïúÍ≥Ñ Îì±) Î∞úÌñâ",
            "ÏÇ¨ÌõÑ Ï±ÖÏûÑ Ï≤¥Í≥Ñ Î∞è ÏÇ¨Í≥† ÎåÄÏùë ÌîÑÎ°úÏÑ∏Ïä§ ÏàòÎ¶Ω"
        ]
        for r in common_recs:
            elements.append(Paragraph(f"‚Ä¢ {r}", self.styles['bullet']))
        elements.append(Spacer(1, 0.3*cm))
        
        # ÏÑúÎπÑÏä§Î≥Ñ Ïö∞ÏÑ† ÏàúÏúÑ Í∂åÍ≥†
        elements.append(Paragraph("5.2 ÏÑúÎπÑÏä§Î≥Ñ Ïö∞ÏÑ† Í∂åÍ≥† (ÏòàÏãú)", self.styles['heading2']))
        for s in services:
            ass = data.get('risk_assessments', {}).get(s, {})
            # Í∏∞Î≥∏Ï†ÅÏúºÎ°ú Í∞ÄÏû• ÎÇÆÏùÄ Ï∞®ÏõêÏóê Ìè¨Ïª§Ïä§ Í∂åÍ≥†
            dims = {
                'Í≥µÏ†ïÏÑ±': ass.get('fairness_score', ass.get('dimensions', {}).get('fairness', {}).get('score', 0)),
                'ÌîÑÎùºÏù¥Î≤ÑÏãú': ass.get('privacy_score', ass.get('dimensions', {}).get('privacy', {}).get('score', 0)),
                'Ìà¨Î™ÖÏÑ±': ass.get('transparency_score', ass.get('dimensions', {}).get('transparency', {}).get('score', 0)),
                'Ï±ÖÏûÑÏÑ±': ass.get('accountability_score', ass.get('dimensions', {}).get('accountability', {}).get('score', 0)),
                'ÏïàÏ†ÑÏÑ±': ass.get('safety_score', ass.get('dimensions', {}).get('safety', {}).get('score', 0)),
            }
            # Í∞ÄÏû• ÎÇÆÏùÄ Í∞í Ï∞æÍ∏∞
            worst_dim = min(dims.items(), key=lambda x: float(x[1] or 0))[0]
            elements.append(Paragraph(f"{s} ‚Äî Ïö∞ÏÑ† Í∞úÏÑ† ÎåÄÏÉÅ: {worst_dim}", self.styles['bullet_sub']))
            elements.append(Paragraph(f"Í∂åÍ≥†: {s}Îäî {worst_dim} Ìñ•ÏÉÅÏùÑ ÏúÑÌï¥ Íµ¨Ï≤¥Ï†ÅÏúºÎ°ú Îã§ÏùåÏùÑ ÏàòÌñâÌïòÏã≠ÏãúÏò§.", self.styles['body_indent']))
            elements.append(Paragraph("‚Ä¢ Ï†ïÏ±Ö Î∞è Ï†àÏ∞® Î¨∏ÏÑúÌôî\n‚Ä¢ Í∏∞Ïà†Ï†Å ÌÜµÏ†ú(Î™®Îç∏ Î™®ÎãàÌÑ∞ÎßÅ, Î°úÍ∑∏, ÌÖåÏä§Ìä∏) ÎèÑÏûÖ\n‚Ä¢ Ï±ÖÏûÑÏûê ÏßÄÏ†ï Î∞è Ï†ïÍ∏∞ Í∞êÏÇ¨ Í≥ÑÌöç ÏàòÎ¶Ω", self.styles['body_indent']))
            elements.append(Spacer(1, 0.2*cm))
        
        return elements
    
    def _create_references(self) -> List:
        """Ï∞∏Í≥†Î¨∏Ìóå(ÏòàÏãú)"""
        elements = []
        elements.append(Paragraph("6. Ï∞∏Í≥†Î¨∏Ìóå", self.styles['heading1']))
        elements.append(Spacer(1, 0.2*cm))
        
        refs = [
            "European Union. (2021). Proposal for a Regulation laying down harmonised rules on artificial intelligence (AI Act).",
            "UNESCO. (2021). Recommendation on the Ethics of Artificial Intelligence.",
            "OECD. (2019). OECD Principles on Artificial Intelligence.",
            "Íµ≠ÎÇ¥Ïô∏ Í¥ÄÎ†® Í∞ÄÏù¥ÎìúÎùºÏù∏ Î∞è Í≥µÍ∞ú ÏûêÎ£å"
        ]
        for r in refs:
            elements.append(Paragraph(f"‚Ä¢ {r}", self.styles['body']))
        
        return elements
    
    def _create_appendix(self) -> List:
        """Î∂ÄÎ°ù(Ïòà: Ï≤¥ÌÅ¨Î¶¨Ïä§Ìä∏, Ïö©Ïñ¥Ï†ïÏùò Îì±)"""
        elements = []
        elements.append(Paragraph("7. Î∂ÄÎ°ù", self.styles['heading1']))
        elements.append(Spacer(1, 0.2*cm))
        
        # ÏòàÏãú Ï≤¥ÌÅ¨Î¶¨Ïä§Ìä∏
        elements.append(Paragraph("7.1 ÌèâÍ∞Ä Ï≤¥ÌÅ¨Î¶¨Ïä§Ìä∏ (ÏòàÏãú)", self.styles['heading2']))
        checklist = [
            "‚Ä¢ Í∞úÏù∏Ï†ïÎ≥¥ ÏµúÏÜåÌôî ÏõêÏπô Ï†ÅÏö© Ïó¨Î∂Ä",
            "‚Ä¢ Ìé∏Ìñ•ÏÑ± ÌÖåÏä§Ìä∏ Î∞è Í≤∞Í≥º Î¨∏ÏÑúÌôî Ïó¨Î∂Ä",
            "‚Ä¢ Î™®Îç∏ Î≥ÄÍ≤Ω Ïãú Ïû¨ÌèâÍ∞Ä ÌîÑÎ°úÏÑ∏Ïä§ Ï°¥Ïû¨ Ïó¨Î∂Ä",
            "‚Ä¢ ÏÇ¨Ïö©Ïûê ÏïåÎ¶º Î∞è ÎèôÏùò Ï†àÏ∞® Íµ¨Ï∂ï Ïó¨Î∂Ä",
            "‚Ä¢ Î≥¥Ïïà/Ïπ®Ìï¥ÏÇ¨Í≥† ÎåÄÏùë Í≥ÑÌöç Ï°¥Ïû¨ Ïó¨Î∂Ä"
        ]
        for c in checklist:
            elements.append(Paragraph(c, self.styles['bullet']))
        elements.append(Spacer(1, 0.3*cm))
        
        # Ïö©Ïñ¥Ï†ïÏùò
        elements.append(Paragraph("7.2 Ïö©Ïñ¥Ï†ïÏùò", self.styles['heading2']))
        terms = [
            ("Í≥µÏ†ïÏÑ±", "ÏïåÍ≥†Î¶¨Ï¶òÏù¥ ÌäπÏ†ï Í∑∏Î£πÏóê Î∂àÏù¥ÏùµÏùÑ Ï£ºÏßÄ ÏïäÎèÑÎ°ù Î≥¥Ïû•ÌïòÎäî ÏõêÏπô"),
            ("Ìà¨Î™ÖÏÑ±", "ÏãúÏä§ÌÖúÏùò ÏùòÏÇ¨Í≤∞Ï†ïÍ≥º ÌïúÍ≥ÑÏóê ÎåÄÌï¥ ÏÑ§Î™Ö Í∞ÄÎä•Ìïú Ï†ïÎèÑ"),
            ("Ï±ÖÏûÑÏÑ±", "ÏãúÏä§ÌÖú Ïö¥ÏòÅ Ï£ºÏ≤¥Ïùò Î≤ïÏ†Å/Ïú§Î¶¨Ï†Å Ï±ÖÏûÑ ÏÜåÏû¨"),
        ]
        for t, d in terms:
            elements.append(Paragraph(f"‚Ä¢ {t}: {d}", self.styles['body']))
        
        return elements
    
    def _get_grade(self, score: float) -> str:
        """Ï†êÏàò -> Îì±Í∏â Î≥ÄÌôò (ÏòàÏãú)"""
        try:
            s = float(score)
        except Exception:
            s = 0.0
        if s >= 4.5:
            return "A+"
        elif s >= 4.0:
            return "A"
        elif s >= 3.5:
            return "B+"
        elif s >= 3.0:
            return "B"
        elif s >= 2.5:
            return "C"
        elif s >= 2.0:
            return "D"
        else:
            return "F"
